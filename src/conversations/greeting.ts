import {Conversation, createConversation} from "@ponomarevlad/grammyjs-conversations";
import type {MyContext} from "../index";
import {Composer, Keyboard} from "grammy";
import {backToStart} from "../helpers/menu";
// @ts-ignore
import {handleException} from "../helpers/errors";
import {getUsers} from "../helpers/api";
import {askBuilding, askFlat} from "../helpers/questions";

const bot = new Composer<MyContext>();

export async function greeting(conversation: Conversation<any>, ctx: MyContext) {
    try {
        // ========= Ask for contact =========
        await ctx.reply(`–í—ñ—Ç–∞—é!\n–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –∑–Ω–∏–∑—É üëá`, {
            reply_markup: new Keyboard().requestContact('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º').oneTime().resized()
        });

        const contactReply = await conversation.waitFor(':contact', {
            otherwise: async (ctx) => {
                await ctx.reply(`–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –Ω—ñ—á–æ–≥–æ... \n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –∑–Ω–∏–∑—É üëá`)
            }
        });
        // ========= Check for contact =========
        if (contactReply.message?.contact) {
            // set contact into format without + and -
            contactReply.message.contact.phone_number = contactReply.message?.contact.phone_number.replace('+', '').replace('-', '')

            const statusMessage = await ctx.reply("–ó–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ...");
            const response = await conversation.external(async () => await getUsers(ctx, {
                phone: contactReply.message.contact.phone_number
            }))

            try {
                await conversation.sleep(1000)
                await statusMessage.editText("–ó—Ä–æ–±–ª–µ–Ω–æ.")
                await conversation.sleep(1000)
            } catch (e) {

            }
            // await statusMessage.delete().catch(() => {})
            conversation.session.contact = contactReply.message.contact;

            if (!response?.length) {
                await ctx.reply(`–í–∏–±–∞—á—Ç–µ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ. –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –∑–≤—è–∂—ñ—Ç—å—Å—è –∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –û–°–ë–ë –≤–∞—à–æ–≥–æ –±—É–¥–∏–Ω–∫—É.\n–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –Ω–∏–∂—á–µ.`, {
                    reply_markup: new Keyboard().text('/start').resized().oneTime()
                })
                return
            }
        }
        // ========= End ask for contact =========
        const building = await askBuilding(
            ctx,
            conversation,
            `–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, ${contactReply.message?.contact?.first_name}!\n–í–∫–∞–∂—ñ—Ç—å –≤ —è–∫–æ–º—É –±—É–¥–∏–Ω–∫—É –≤–∏ –º–µ—à–∫–∞—î—Ç–µ:`
        )
        conversation.session.building = building
        // ========= End ask for building =========

        // ========= Ask for flat =========
        const flat = await askFlat(ctx, conversation, `–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –∫–≤–∞—Ä—Ç–∏—Ä—É:`)
        conversation.session.flat = flat
        // ========= End ask for flat =========

        await backToStart(ctx, `–°—É–ø–µ—Ä, –¥—è–∫—É—é –∑–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ü–µ—Ä–µ–π–¥–µ–º–æ –¥–æ —Å–ø—Ä–∞–≤–∏.`)
        return
    } catch (e: any) {
        await handleException(e, ctx)
    }
}

bot.use(createConversation(greeting))

export default bot