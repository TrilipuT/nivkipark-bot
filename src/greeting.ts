import type {Conversation} from "@ponomarevlad/grammyjs-conversations";
import type {MyContext} from "./index";
import {InlineKeyboard, Keyboard} from "grammy";
import {backToStart} from "./menu";
import {getBuildingName} from 'nivkipark/src/helpers/buildings'

function sleep(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

export async function greeting(conversation: Conversation<any>, ctx: MyContext) {
    await ctx.reply(`–í—ñ—Ç–∞—é!\n–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞`, {
        reply_markup: new Keyboard().requestContact('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º').oneTime().resized()
    });
    // @ts-ignore
    const contactReply = await conversation.wait(':contact');
    if (!contactReply.message?.contact) {
        await ctx.reply(`–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –Ω—ñ—á–æ–≥–æ... \n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –∑–Ω–∏–∑—É üëá`)
        await conversation.skip()
    }

    const statusMessage = await ctx.reply("–ó–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ...");

    const response: object[] = await fetch(`https://nivkipark.pages.dev/api/vehicles?type=2&phone=${contactReply.message?.contact.phone_number}`, {
        headers: {
            "Content-Type": "application/json",
        }
    }).then(response => response.json())

    await sleep(1000)
    // await statusMessage.editText("–ó—Ä–æ–±–ª–µ–Ω–æ.")
    // await sleep(1000)
    
    if (!response.length) {
        await ctx.reply(`–í–∏–±–∞—á—Ç–µ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ. –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –∑–≤—è–∂—ñ—Ç—å—Å—è –∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –û–°–ë–ë –≤–∞—à–æ–≥–æ –±—É–¥–∏–Ω–∫—É.\n–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –Ω–∏–∂—á–µ.`, {
            reply_markup: new Keyboard().text('/start').resized().oneTime()
        })
        return
    }

    conversation.session.contact = contactReply.message?.contact;

    const keyboard = new InlineKeyboard()
        .text(getBuildingName('b1'), 'b1')
        .text(getBuildingName('b2'), 'b2')
        .text(getBuildingName('b3'), 'b3').row()
        .text(getBuildingName('b4'), 'b4')
        .text(getBuildingName('b5'), 'b5')
        .text(getBuildingName('b6'), 'b6').row()
        // —à–∫–æ–ª–∞ 65–ì
        .text(getBuildingName('b7'), 'b7')
        .text(getBuildingName('b8'), 'b8')
        // .text('1A (9)','b9')
        // .text('1–ë (10)','b10')
        .text(getBuildingName('b11'), 'b11').row()
        .text(getBuildingName('b12'), 'b12')
    await ctx.reply(`–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, ${contactReply.message?.contact?.first_name}!\n–í–∫–∞–∂—ñ—Ç—å –≤ —è–∫–æ–º—É –±—É–¥–∏–Ω–∫—É –≤–∏ –º–µ—à–∫–∞—î—Ç–µ:`, {
        reply_markup: keyboard
    });
    const buildingReply = await conversation.waitFor("callback_query:data");
    if (!buildingReply.update.callback_query.data) {
        await ctx.reply(`–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –Ω—ñ—á–æ–≥–æ... \n–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –±—É–¥—å –ª–∞—Å–∫–∞`)
        await conversation.skip()
    }
    conversation.session.building = buildingReply.update.callback_query.data

    await ctx.reply(`–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –∫–≤–∞—Ä—Ç–∏—Ä—É:`, {
        reply_markup: {remove_keyboard: true},
    })
    const flatReply = await conversation.wait();
    conversation.session.flat = flatReply.message.text

    await backToStart(ctx, `–°—É–ø–µ—Ä, –¥—è–∫—É—é –∑–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ü–µ—Ä–µ–π–¥–µ–º –¥–æ –¥—ñ–ª–∞.`)
    return
}