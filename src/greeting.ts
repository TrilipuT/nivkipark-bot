import type {Conversation} from "@ponomarevlad/grammyjs-conversations";
import type {MyContext} from "./index";
import {InlineKeyboard, Keyboard} from "grammy";
import {backToStart} from "./menu";
import {getBuildingName} from 'nivkipark/src/helpers/buildings'
import {blockedCleanup} from "./errors";


export async function greeting(conversation: Conversation<any>, ctx: MyContext) {
    try {
        // ========= Ask for contact =========
        await ctx.reply(`–í—ñ—Ç–∞—é!\n–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –∑–Ω–∏–∑—É üëá`, {
            reply_markup: new Keyboard().requestContact('–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º').oneTime().resized()
        });

        const contactReply = await conversation.waitFor(':contact', {
            otherwise: async (ctx) => {
                await ctx.reply(`–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –Ω—ñ—á–æ–≥–æ... \n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –∑–Ω–∏–∑—É üëá`)
            }
        });
        // ========= Check for contact =========
        if (contactReply.message?.contact) {
            const statusMessage = await ctx.reply("–ó–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ...");
            const response = await conversation.external(async () => {
                const request: object[] = await fetch(`https://nivkipark.pages.dev/api/vehicles?type=2&phones=${contactReply.message?.contact.phone_number}`, {
                    headers: {
                        "Content-Type": "application/json",
                    }
                }).then(response => response.json())

                return request
            })
            try {
                await conversation.sleep(1000)
                await statusMessage.editText("–ó—Ä–æ–±–ª–µ–Ω–æ.")
                await conversation.sleep(1000)
            } catch (e) {

            }
            // await statusMessage.delete().catch(() => {})

            if (!response?.length) {
                await ctx.reply(`–í–∏–±–∞—á—Ç–µ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ. –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º –∑–≤—è–∂—ñ—Ç—å—Å—è –∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –û–°–ë–ë –≤–∞—à–æ–≥–æ –±—É–¥–∏–Ω–∫—É.\n–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –Ω–∏–∂—á–µ.`, {
                    reply_markup: new Keyboard().text('/start').resized().oneTime()
                })
                return
            }

            conversation.session.contact = contactReply.message?.contact;
        }
        // ========= End ask for contact =========


        const keyboard = new InlineKeyboard()
            .text(getBuildingName('b1'), 'b1')
            .text(getBuildingName('b2'), 'b2')
            .text(getBuildingName('b3'), 'b3').row()
            .text(getBuildingName('b4'), 'b4')
            .text(getBuildingName('b5'), 'b5')
            .text(getBuildingName('b6'), 'b6').row()
            // —à–∫–æ–ª–∞ 65–ì
            .text(getBuildingName('b7'), 'b7')
            .text(getBuildingName('b8'), 'b8')
            // .text('1A (9)','b9')
            // .text('1–ë (10)','b10')
            .text(getBuildingName('b11'), 'b11').row()
            .text(getBuildingName('b12'), 'b12')

        // ========= Ask for building =========
        await ctx.reply(`–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, ${contactReply.message?.contact?.first_name}!\n–í–∫–∞–∂—ñ—Ç—å –≤ —è–∫–æ–º—É –±—É–¥–∏–Ω–∫—É –≤–∏ –º–µ—à–∫–∞—î—Ç–µ:`, {
            reply_markup: keyboard
        });
        const buildingReply = await conversation.waitFor("callback_query:data", {
            otherwise: async (ctx) => {
                await ctx.reply(`–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–æ–ø–∫—É –≤–∏—â–µ üëÜ`)
            }
        });
        if (buildingReply.update.callback_query.data) {
            // await ctx.reply(`–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –Ω—ñ—á–æ–≥–æ... \n–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –±—É–¥—å –ª–∞—Å–∫–∞`)
            conversation.session.building = buildingReply.update.callback_query.data
        }

        // ========= End ask for building =========

        // ========= Ask for flat =========
        await ctx.reply(`–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –∫–≤–∞—Ä—Ç–∏—Ä—É:`, {
            reply_markup: {remove_keyboard: true},
        })
        const flatReply = await conversation.waitFor('message:text', {
            otherwise: async (ctx) => {
                await ctx.reply(`–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –Ω—ñ—á–æ–≥–æ... \n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏, –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è —á–∏ –Ω–∞–∑–≤—É –∫–æ–º–µ—Ä—Ü—ñ—ó.`)
            }
        });
        conversation.session.flat = flatReply.message.text
        // ========= End ask for flat =========

        await backToStart(ctx, `–°—É–ø–µ—Ä, –¥—è–∫—É—é –∑–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ü–µ—Ä–µ–π–¥–µ–º –¥–æ –¥—ñ–ª–∞.`)
        return
    } catch (e: any) {
        console.log(e);
    }
}